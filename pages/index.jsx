import Head from "next/head";
import BlogCard from "../components/BlogCard";
import Card from "../components/Card";
import styles from "../styles/Home.module.css";
import { Button, SimpleGrid, Box, CircularProgress } from "@chakra-ui/react";
import { BiRefresh } from "react-icons/bi";
import {
  collectionGroup,
  getDocs,
  limit,
  orderBy,
  query,
  where,
  Timestamp,
  startAfter,
} from "firebase/firestore";
import { firestore, postToJSON } from "../lib/firebase";
import { useState } from "react";

//Max post to query per page
const LIMIT = 4;

export default function Home({ posts }) {
  const [currentPosts, setCurrentPosts] = useState(posts);
  const [loading, setLoading] = useState(false);
  const [postsEnd, setPostsEnd] = useState(false);

  const getMorePosts = async () => {
    setLoading(true);
    const lastPost = currentPosts[currentPosts.length - 1];

    const cursor = Timestamp.fromMillis(lastPost.postData.createdAt);

    const postsQuery = collectionGroup(firestore, "posts");
    const q = query(
      postsQuery,
      where("published", "==", true),
      orderBy("createdAt", "desc"),
      startAfter(cursor),
      limit(3)
    );
    const newPosts = (await getDocs(q)).docs.map((newPost) => {
      const docId = newPost.id;
      const postData = postToJSON(newPost);
      return { docId, postData };
    });

    setCurrentPosts(currentPosts.concat(newPosts));
    setLoading(false);
    if (newPosts.length < 3) {
      setPostsEnd(true);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Nextjs Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box className={styles.main}>
        <BlogCard post={currentPosts[0]} />
        <SimpleGrid columns={{ sm: 1, md: 2, lg: 3 }} sx={{ width: "100%" }}>
          {currentPosts.map((post, index) => {
            if (index > 0) {
              return <Card key={index} post={post} />;
            }
          })}
        </SimpleGrid>

        {loading && <CircularProgress isIndeterminate color="green.300" />}
        {postsEnd && "You have reached the end!"}

        {!loading && !postsEnd ? (
          <Button
            rightIcon={<BiRefresh />}
            colorScheme="blue"
            variant="outline"
            onClick={getMorePosts}
          >
            {loading ? (
              <CircularProgress isIndeterminate color="green.300" />
            ) : (
              <Box>Load More</Box>
            )}
          </Button>
        ) : (
          <></>
        )}
      </Box>
    </div>
  );
}

export async function getServerSideProps(context) {
  const postsQuery = collectionGroup(firestore, "posts");
  const q = query(
    postsQuery,
    where("published", "==", true),
    orderBy("createdAt", "desc"),
    limit(LIMIT)
  );
  const posts = (await getDocs(q)).docs.map((post) => {
    const docId = post.id;
    const postData = postToJSON(post);
    return { docId, postData };
  });

  return {
    props: { posts },
  };
}
